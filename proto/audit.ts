// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v6.31.0
// source: proto/audit.proto

/* eslint-disable */
import { Metadata } from "@grpc/grpc-js";
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";
import { Timestamp } from "../google/protobuf/timestamp";

export const protobufPackage = "audit";

export interface ListAuditRewardsRequest {
  page: number;
  limit: number;
  filterUsername?: string | undefined;
  filterEventId?: string | undefined;
}

export interface AuditRewardListResponse {
  page: number;
  limit: number;
  total: number;
  filterUsername?: string | undefined;
  filterEventId?: string | undefined;
  list: AuditReward[];
}

export interface AuditReward {
  auditId: string;
  userId: string;
  username: string;
  eventId: string;
  eventTitle: string;
  claimedRewards: ClaimedReward[];
  timestamp: Timestamp | undefined;
}

export interface ClaimedReward {
  rewardId: string;
  type: string;
  title: string;
  description?: string | undefined;
  point?: number | undefined;
  coupons: string[];
  items: string[];
  active: boolean;
  createdAt: Timestamp | undefined;
  updatedAt: Timestamp | undefined;
}

export const AUDIT_PACKAGE_NAME = "audit";

export interface AuditServiceClient {
  listAuditRewards(request: ListAuditRewardsRequest, metadata?: Metadata): Observable<AuditRewardListResponse>;
}

export interface AuditServiceController {
  listAuditRewards(
    request: ListAuditRewardsRequest,
    metadata?: Metadata,
  ): Promise<AuditRewardListResponse> | Observable<AuditRewardListResponse> | AuditRewardListResponse;
}

export function AuditServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["listAuditRewards"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("AuditService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("AuditService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const AUDIT_SERVICE_NAME = "AuditService";
