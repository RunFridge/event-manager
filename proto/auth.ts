// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v6.30.2
// source: proto/auth.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "auth";

/** Registration related messages */
export interface RegisterRequest {
  email: string;
  password: string;
  username: string;
}

export interface RegisterResponse {
  success: boolean;
  message: string;
  user: UserData | undefined;
}

/** Login related messages */
export interface LoginRequest {
  email: string;
  password: string;
}

export interface LoginResponse {
  success: boolean;
  message: string;
  accessToken: string;
  refreshToken: string;
  user: UserData | undefined;
}

/** Token validation related messages */
export interface ValidateTokenRequest {
  token: string;
}

export interface ValidateTokenResponse {
  valid: boolean;
  user: UserData | undefined;
  roles: string[];
}

/** Role management related messages */
export interface AssignRoleRequest {
  userId: string;
  role: string;
}

export interface AssignRoleResponse {
  success: boolean;
  message: string;
  roles: string[];
}

export interface RemoveRoleRequest {
  userId: string;
  role: string;
}

export interface RemoveRoleResponse {
  success: boolean;
  message: string;
  roles: string[];
}

export interface GetUserRolesRequest {
  userId: string;
}

export interface GetUserRolesResponse {
  roles: string[];
}

/** Common data structures */
export interface UserData {
  id: string;
  email: string;
  username: string;
  roles: string[];
  createdAt: string;
  updatedAt: string;
}

export const AUTH_PACKAGE_NAME = "auth";

/** Auth service definition */

export interface AuthServiceClient {
  /** User registration */

  register(request: RegisterRequest): Observable<RegisterResponse>;

  /** User login */

  login(request: LoginRequest): Observable<LoginResponse>;

  /** Token validation */

  validateToken(request: ValidateTokenRequest): Observable<ValidateTokenResponse>;

  /** Role management */

  assignRole(request: AssignRoleRequest): Observable<AssignRoleResponse>;

  removeRole(request: RemoveRoleRequest): Observable<RemoveRoleResponse>;

  getUserRoles(request: GetUserRolesRequest): Observable<GetUserRolesResponse>;
}

/** Auth service definition */

export interface AuthServiceController {
  /** User registration */

  register(request: RegisterRequest): Promise<RegisterResponse> | Observable<RegisterResponse> | RegisterResponse;

  /** User login */

  login(request: LoginRequest): Promise<LoginResponse> | Observable<LoginResponse> | LoginResponse;

  /** Token validation */

  validateToken(
    request: ValidateTokenRequest,
  ): Promise<ValidateTokenResponse> | Observable<ValidateTokenResponse> | ValidateTokenResponse;

  /** Role management */

  assignRole(
    request: AssignRoleRequest,
  ): Promise<AssignRoleResponse> | Observable<AssignRoleResponse> | AssignRoleResponse;

  removeRole(
    request: RemoveRoleRequest,
  ): Promise<RemoveRoleResponse> | Observable<RemoveRoleResponse> | RemoveRoleResponse;

  getUserRoles(
    request: GetUserRolesRequest,
  ): Promise<GetUserRolesResponse> | Observable<GetUserRolesResponse> | GetUserRolesResponse;
}

export function AuthServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["register", "login", "validateToken", "assignRole", "removeRole", "getUserRoles"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("AuthService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("AuthService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const AUTH_SERVICE_NAME = "AuthService";
