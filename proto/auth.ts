// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v6.31.0
// source: proto/auth.proto

/* eslint-disable */
import { Metadata } from "@grpc/grpc-js";
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";
import { Timestamp } from "../google/protobuf/timestamp";

export const protobufPackage = "auth";

export interface TokenRequest {
  accessToken: string;
  refreshToken: string;
}

export interface GetUserRequest {
  userId: string;
}

export interface ListUserRequest {
  page: number;
  limit: number;
  filterActive?: boolean | undefined;
}

export interface ActivateUserRequest {
  userId: string;
}

export interface AssignRoleRequest {
  userId: string;
  role: string;
}

export interface RegisterRequest {
  username: string;
  password: string;
  referral?: string | undefined;
  birthday?: Timestamp | undefined;
}

export interface LoginRequest {
  username: string;
  password: string;
}

export interface CommonResponse {
  result: boolean;
  message?: string | undefined;
  tokenResponse?: TokenResponse | undefined;
  userResponse?: UserResponse | undefined;
}

export interface UserListResponse {
  page: number;
  limit: number;
  total: number;
  filterActive?: boolean | undefined;
  list: UserResponse[];
}

export interface TokenResponse {
  accessToken: string;
  refreshToken: string;
  accessTokenExpiresIn: number;
  refreshTokenExpiresIn: number;
}

export interface UserResponse {
  userId: string;
  username: string;
  role: string;
  active: boolean;
  birthday: Timestamp | undefined;
  createdAt: Timestamp | undefined;
  updatedAt: Timestamp | undefined;
  lastLoginAt: Timestamp | undefined;
  condition?: Condition | undefined;
  inventory?: Inventory | undefined;
}

export interface Condition {
  loginStreakDays: number;
  referralCount: number;
}

export interface Inventory {
  point: number;
  coupons: string[];
  items: string[];
}

export const AUTH_PACKAGE_NAME = "auth";

export interface AuthServiceClient {
  register(request: RegisterRequest, metadata?: Metadata): Observable<CommonResponse>;

  login(request: LoginRequest, metadata?: Metadata): Observable<CommonResponse>;

  refreshToken(request: TokenRequest, metadata?: Metadata): Observable<CommonResponse>;

  revokeToken(request: TokenRequest, metadata?: Metadata): Observable<CommonResponse>;

  activateUser(request: ActivateUserRequest, metadata?: Metadata): Observable<CommonResponse>;

  assignRole(request: AssignRoleRequest, metadata?: Metadata): Observable<CommonResponse>;

  listUsers(request: ListUserRequest, metadata?: Metadata): Observable<UserListResponse>;

  getUser(request: GetUserRequest, metadata?: Metadata): Observable<CommonResponse>;
}

export interface AuthServiceController {
  register(
    request: RegisterRequest,
    metadata?: Metadata,
  ): Promise<CommonResponse> | Observable<CommonResponse> | CommonResponse;

  login(
    request: LoginRequest,
    metadata?: Metadata,
  ): Promise<CommonResponse> | Observable<CommonResponse> | CommonResponse;

  refreshToken(
    request: TokenRequest,
    metadata?: Metadata,
  ): Promise<CommonResponse> | Observable<CommonResponse> | CommonResponse;

  revokeToken(
    request: TokenRequest,
    metadata?: Metadata,
  ): Promise<CommonResponse> | Observable<CommonResponse> | CommonResponse;

  activateUser(
    request: ActivateUserRequest,
    metadata?: Metadata,
  ): Promise<CommonResponse> | Observable<CommonResponse> | CommonResponse;

  assignRole(
    request: AssignRoleRequest,
    metadata?: Metadata,
  ): Promise<CommonResponse> | Observable<CommonResponse> | CommonResponse;

  listUsers(
    request: ListUserRequest,
    metadata?: Metadata,
  ): Promise<UserListResponse> | Observable<UserListResponse> | UserListResponse;

  getUser(
    request: GetUserRequest,
    metadata?: Metadata,
  ): Promise<CommonResponse> | Observable<CommonResponse> | CommonResponse;
}

export function AuthServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      "register",
      "login",
      "refreshToken",
      "revokeToken",
      "activateUser",
      "assignRole",
      "listUsers",
      "getUser",
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("AuthService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("AuthService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const AUTH_SERVICE_NAME = "AuthService";
