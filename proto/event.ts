// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v6.31.0
// source: proto/event.proto

/* eslint-disable */
import { Metadata } from "@grpc/grpc-js";
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";
import { Timestamp } from "../google/protobuf/timestamp";

export const protobufPackage = "event";

export interface ClaimEventRewardRequest {
  username: string;
  eventId: string;
}

export interface ListEventsRequest {
  page: number;
  limit: number;
  filterActive?: boolean | undefined;
  filterType?: string | undefined;
}

export interface GetEventRequest {
  eventId: string;
}

export interface CreateEventRequest {
  type: string;
  title: string;
  description?: string | undefined;
  targetCriteria: number;
  rewardIds: string[];
}

export interface UpdateEventRequest {
  eventId: string;
  type: string;
  title: string;
  active: boolean;
  targetCriteria: number;
  description?: string | undefined;
  rewardIds: string[];
}

export interface DeleteEventRequest {
  eventId: string;
}

export interface ListEventsResponse {
  page: number;
  limit: number;
  total: number;
  filterActive?: boolean | undefined;
  filterType?: string | undefined;
  list: EventResponse[];
}

export interface CommonResponse {
  result: boolean;
  message?: string | undefined;
  eventResponse?: EventResponse | undefined;
}

export interface Reward {
  rewardId: string;
  type: string;
  title: string;
  description?: string | undefined;
  point?: number | undefined;
  coupons: string[];
  items: string[];
  active: boolean;
}

export interface EventResponse {
  eventId: string;
  type: string;
  title: string;
  description?: string | undefined;
  targetCriteria: number;
  rewards: Reward[];
  active: boolean;
  createdAt: Timestamp | undefined;
  updatedAt?: Timestamp | undefined;
}

export const EVENT_PACKAGE_NAME = "event";

export interface EventServiceClient {
  listEvents(request: ListEventsRequest, metadata?: Metadata): Observable<ListEventsResponse>;

  getEvent(request: GetEventRequest, metadata?: Metadata): Observable<CommonResponse>;

  createEvent(request: CreateEventRequest, metadata?: Metadata): Observable<CommonResponse>;

  updateEvent(request: UpdateEventRequest, metadata?: Metadata): Observable<CommonResponse>;

  deleteEvent(request: DeleteEventRequest, metadata?: Metadata): Observable<CommonResponse>;

  claimEventReward(request: ClaimEventRewardRequest, metadata?: Metadata): Observable<CommonResponse>;
}

export interface EventServiceController {
  listEvents(
    request: ListEventsRequest,
    metadata?: Metadata,
  ): Promise<ListEventsResponse> | Observable<ListEventsResponse> | ListEventsResponse;

  getEvent(
    request: GetEventRequest,
    metadata?: Metadata,
  ): Promise<CommonResponse> | Observable<CommonResponse> | CommonResponse;

  createEvent(
    request: CreateEventRequest,
    metadata?: Metadata,
  ): Promise<CommonResponse> | Observable<CommonResponse> | CommonResponse;

  updateEvent(
    request: UpdateEventRequest,
    metadata?: Metadata,
  ): Promise<CommonResponse> | Observable<CommonResponse> | CommonResponse;

  deleteEvent(
    request: DeleteEventRequest,
    metadata?: Metadata,
  ): Promise<CommonResponse> | Observable<CommonResponse> | CommonResponse;

  claimEventReward(
    request: ClaimEventRewardRequest,
    metadata?: Metadata,
  ): Promise<CommonResponse> | Observable<CommonResponse> | CommonResponse;
}

export function EventServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      "listEvents",
      "getEvent",
      "createEvent",
      "updateEvent",
      "deleteEvent",
      "claimEventReward",
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("EventService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("EventService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const EVENT_SERVICE_NAME = "EventService";
