// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v6.31.0
// source: proto/reward.proto

/* eslint-disable */
import { Metadata } from "@grpc/grpc-js";
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";
import { Timestamp } from "../google/protobuf/timestamp";

export const protobufPackage = "reward";

export interface CreateRewardRequest {
  type: string;
  title: string;
  description?: string | undefined;
  point?: number | undefined;
  coupons: string[];
  items: string[];
  active?: boolean | undefined;
}

export interface UpdateRewardRequest {
  rewardId: string;
  type: string;
  title: string;
  description?: string | undefined;
  point?: number | undefined;
  coupons: string[];
  items: string[];
  active?: boolean | undefined;
}

export interface ListRewardRequest {
  page: number;
  limit: number;
  total: number;
  filterActive?: boolean | undefined;
  filterType?: string | undefined;
}

export interface ListRewardResponse {
  page: number;
  limit: number;
  total: number;
  filterActive?: boolean | undefined;
  filterType?: string | undefined;
  list: RewardResponse[];
}

export interface CommonResponse {
  result: boolean;
  message?: string | undefined;
  rewardResponse?: RewardResponse | undefined;
}

export interface RewardResponse {
  rewardId: string;
  type: string;
  title: string;
  description?: string | undefined;
  point: number;
  coupons: string[];
  items: string[];
  active: boolean;
  createdAt: Timestamp | undefined;
  updatedAt: Timestamp | undefined;
}

export const REWARD_PACKAGE_NAME = "reward";

export interface RewardServiceClient {
  createReward(request: CreateRewardRequest, metadata?: Metadata): Observable<CommonResponse>;

  updateReward(request: UpdateRewardRequest, metadata?: Metadata): Observable<CommonResponse>;

  listReward(request: ListRewardRequest, metadata?: Metadata): Observable<ListRewardResponse>;
}

export interface RewardServiceController {
  createReward(
    request: CreateRewardRequest,
    metadata?: Metadata,
  ): Promise<CommonResponse> | Observable<CommonResponse> | CommonResponse;

  updateReward(
    request: UpdateRewardRequest,
    metadata?: Metadata,
  ): Promise<CommonResponse> | Observable<CommonResponse> | CommonResponse;

  listReward(
    request: ListRewardRequest,
    metadata?: Metadata,
  ): Promise<ListRewardResponse> | Observable<ListRewardResponse> | ListRewardResponse;
}

export function RewardServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["createReward", "updateReward", "listReward"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("RewardService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("RewardService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const REWARD_SERVICE_NAME = "RewardService";
